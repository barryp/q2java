Q2Java v0.2 -  Quake II Game programming in Java

    Author:   Barry Pederson <bpederson@geocities.com>
    Homepage: http://www.openquake.org/jquake/q2java
    Date:     March 23, 1998

    Description: A DLL and Java classes that allow a QuakeII game
                 to be written in Java.

    Requirements: Win95 or WinNT 4.0
                  Quake II v 3.14 for Win32/Intel
                  Sun Java JDK or JRE 1.1.5 (seems to work with 1.1.4 also)

-------------------------------------

WHAT'S NEW

    IN THE Q2JAVA PACKAGE:
    ----------------------

    Based on discussions on the javaquake discussion list (subscribe
    on the OpenQuake website - www.openquake.org), I've opened up
    the q2java.NativeEntity class so that it's non-abstract and
    a game may create instances directly rather than having to
    extend it.  Instances of the class now have a general-purpose
    Object reference that can be used in a game-defined way, by
    calling the "void setReference(Object obj)" and "Object getReference()"
    methods.

    The ConsoleOutputStream is now public, so that classes can
    tap into data that's being sent to the console (used by the
    Telnet server - more on that further down)

    The Security Manager was wound a little too tight, it's been
    loosened a bit to allow better network access at security level 1,
    and multithreading in levels 1 and 2.


    IN THE QJGAME PACKAGES (the sample game):
    ----------------------------------------

    This version shows off Java's multithreading and network support
    by including a Telnet server right in the game - which allows
    for truly remote consoles.

    A PrintManager class was added as a hub where "dprint()" and "bprint()"
    calls can be sent and repeated to interested classes
    (used by the Telnet server)

    A few new entity classes were added.
    Thanks to "M. van Gangelen" <menno@element.nl> for suppling
    some Java sourcecode.  Mainly you'll notice background
    sounds in the game now.


    OVERALL
    -------
    Better JavaDocs, but still incomplete in many areas.



INSTALLING

    First, you need a working, registered copy of Quake II v3.14

    Secondly, Sun's Java JDK or JRE 1.1.5.  If you downloaded the JDK, you can
    test to see if it's installed properly by typing "java -version" at a
    command prompt.  If it's installed correctly, you'll see a usage message.
    If you installed the JRE, test it by typing "jre -version"

    Make sure the contents of this zip file are extracted into a subdirectory
    of your Quake II directory (usually c:\quake2).
    I'd recommend c:\quake2\q2java

    Assuming you unzipped this file into a game subdirectory named "q2java",
    you can start the sample Q2Java game with this command.

        quake2 +set game q2java

OPTIONS

    Here are some options you can specify to the Q2Java DLL

        +set q2java_security 0
            Turn security features off

        +set q2java_security 1
            Allow read/write access to a subdirectory of the
            game directory named "sandbox" (usually c:\quake2\q2java\sandbox),
            and access to IP ports numbered >1023

        +set q2java_security 2
            (DEFAULT) Turn on full security..no file or IP access is
            allowed at all. Hopefully all the game can do is execute
            game functions.

        (Use security levels 1 and 2 at your own risk)


        +set q2java_gamepath <extra path info>
            The default value of this option is:

                "<gamedir>\q2jgame.jar;<gamedir>\classes;"

            If you packaged up a new Java game into a JAR file,
            (say, "foobar.jar") you could tell the DLL to use your
            JAR file with the parameter

                +set q2java_gamepath foobar.jar


    The Telnet Server

        To enable the telnet server you'll have to set the game
        to run at either security level 0 or 1, the default level
        of 2 will prevent the Telnet server from running.

        Set the port you want to run the server on at the command line
        with the option

            +set telnet_port <n>

        where <n> is a port number (greater than 1023 if in security level 1)

        You can password-protect the Telnet server with the option

            +set telnet_password <pass>

        The Telnet server will relay all Game output to any number of
        connected telnet clients, and allow the client to send chat
        messages or issue commands to the game.

        Unfortunately, the Telnet server has no way to intercept
        output from the Quake2.exe itself, so it's not -quite-
        a perfect remote console..but it's still useful, especially
        for debugging.  MUD clients work well with the server, since
        they usually have large scrollback buffers, and separate
        input and output windows.

        If you're using a stock Telnet client, turn the "local-echo" 
        feature on to see what you're typing. MUD clients usually operate
        this way by default.


MODIFYING THE JAVA CODE

    If you want to modify and recompile the sample game code, here's what I'd
    recommend:

        Create a subdirectory of the game directory named "classes"
        (normally c:\quake2\q2java\classes).

        Unzip the two sourcecode zip files into that, so you end up
        with the java files in directories named:

            c:\quake2\q2java\classes\q2java
            c:\quake2\q2java\classes\q2jgame
            c:\quake2\q2java\classes\q2jgame\spawn
            c;\quake2\q2java\classes\q2jgame\weapon

        (be sure to retain the directory structure when unzipping)

        You can also unzip the two jar files in the same manner, so
        the classes\* directories have both .class and .java files.

        update your classpath environment variable to include the classes
        subdirectory, for example:

            set classpath=c:\jdk\lib\classes.zip;c:\quake2\q2java\classes;

    At this point, you should be able to run the development tools in the
    JDK to compile any changes to the classes.  As a first test, try
    modifying the class "q2jgame.WelcomeMessage" and recompiling: to do this
    use a text editor to modify

        c:\quake2\q2java\classes\q2jgame\WelcomeMessage.java

    Once you've saved your changes, recompile with the command:

        javac WelcomeMessage.java

    Run the game and see if your modification worked.

    The default q2java_gamepath parameter will look for class files in
    the "classes" subdirectory, so you won't have to do anything special
    to have the DLL find the unzipped classes, but you will want to rename
    or delete the q2jgame.jar file, otherwise the DLL will look for classes
    there first and not see any changes you've made.

    Don't make changes to the classes in the q2java.* package, since the DLL
    expects things laid out in a certain way.  You should leave the q2java.jar
    file in the game directory, that way if you accidentally do change any
    of the unzipped files, the DLL won't be affected.  Limit your modifications
    to the q2jgame.* package.

    I have noticed that for some reason the JDK javac compiler complains
    when compiling the q2jgame.spawn.func_train class about accessing
    a protected field that as far as I can tell it should be able to access.
    If anyone can tell me why this is, I'd appreciate it (it compiles fine 
    with IBM's VisualAge for Java compiler)


---------------------------

Knock yourselves out

    Barry <bpederson@geocities.com>
