Q2Java Readme

INSTALLING

    First, you need a working copy of Quake II.

    Secondly, Sun's Java JDK or JRE 1.1.5.  If you downloaded the JDK, you can
    test to see if it's installed properly by typing "java -version" at a
    command prompt.  If it's installed correctly, you'll see a usage message.
    If you installed the JRE, test it by typing "jre -version"

    Make sure the contents of this zip file are extracted into a subdirectory
    of your Quake II directory (usually c:\quake2). 
    I'd recommend c:\quake2\q2java

    Assuming you unzipped this file into a game subdirectory named "q2java",
    you can start the sample Q2Java game with this command.

        quake2 +set game q2java

OPTIONS

    Here are some options you can specify to the Q2Java DLL

        +set q2java_security 0
            Turn security features off

        +set q2java_security 1
            Allow read/write access to a subdirectory of the
            game directory named "sandbox" (usually c:\quake2\q2java\sandbox),
            and access to IP ports numbered >1023

        +set q2java_security 2
            (DEFAULT) Turn on full security..no file or IP access is
            allowed at all. Hopefully all the game can do is execute
            game functions.

        (Use security levels 1 and 2 at your own risk)


        +set q2java_gamepath <extra path info>
            The default value of this option is:

                "<gamedir>\q2jgame.jar;<gamedir>\classes;"

            If you packaged up a new Java game into a JAR file,
            (say, "foobar.jar") you could tell the DLL to use your
            JAR file with the parameter

                +set q2java_gamepath foobar.jar



MODIFYING THE JAVA CODE

    If you want to modify and recompile the sample game code, here's what I'd
    recommend:

        Create a subdirectory of the game directory named "classes"
        (normally c:\quake2\q2java\classes).

        Unzip the two sourcecode zip files into that, so you end up
        with the java files in directories named:

            c:\quake2\q2java\classes\q2java
            c:\quake2\q2java\classes\q2jgame
            c:\quake2\q2java\classes\q2jgame\spawn
            c;\quake2\q2java\classes\q2jgame\weapon

        (be sure to retain the directory structure when unzipping)

        You can also unzip the two jar files in the same manner, so
        the classes\* directories have both .class and .java files.

        update your classpath environment variable to include the classes
        subdirectory, for example:

            set classpath=c:\jdk\lib\classes.zip;c:\quake2\q2java\classes;

    At this point, you should be able to run the development tools in the
    JDK to compile any changes to the classes.  As a first test, try
    modifying the class "q2jgame.WelcomeMessage" and recompiling: to do this
    use a text editor to modify 

        c:\quake2\q2java\classes\q2jgame\WelcomeMessage.java

    Once you've saved your changes, recompile with the command:

        javac WelcomeMessage.java

    Run the game and see if your modification worked.

    The default q2java_gamepath parameter will look for class files in
    the "classes" subdirectory, so you won't have to do anything special
    to have the DLL find the unzipped classes, but you will want to rename
    or delete the q2jgame.jar file, otherwise the DLL will look for classes
    there first and not see any changes you've made.

    Don't make changes to the classes in the q2java.* package, since the DLL
    expects things laid out in a certain way.  You should leave the q2java.jar
    file in the game directory, that way if you accidentally do change any
    of the unzipped files, the DLL won't be affected.  Limit your modifications
    to the q2jgame.* package.

---------------------------

Knock yourselves out

    Barry <bpederson@geocities.com>
